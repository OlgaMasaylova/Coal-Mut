{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "2.9\n"
     ]
    }
   ],
   "source": [
    "#k=int(input())\n",
    "#m=int(input())\n",
    "q=[0, 0.15,0.19, 2.9, 5]#время изменения популяции\n",
    "N = [2, 1.2,1, 1.7, 2.2]#величина популяции\n",
    "print(len(q))\n",
    "print(q[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def population(t,q,N):\n",
    "    m=0\n",
    "    m1=0\n",
    "    i=1\n",
    "    if len(q) != 1:\n",
    "        while i<=len(q):\n",
    "            if t >= q[i-1] and t < q[i]:\n",
    "                return(N[i-1])  \n",
    "            i+=1\n",
    "        if t >= q[-1]:\n",
    "                return(N[-1])\n",
    "    else:\n",
    "        return(N[0])\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s=population(0,q,N)\n",
    "s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def change_pop(t0, t1, q, N):\n",
    "    r = len(q)\n",
    "    y = r\n",
    "    i=0\n",
    "    j=0\n",
    "    while i <=r-1:    \n",
    "        if t0 >=q[i] and t0 < q[i+1]:\n",
    "            r = i\n",
    "            i+=1\n",
    "            break;\n",
    "    while j <=r-1:\n",
    "        if t1 >= c[j] and t1 < c[j+1]:\n",
    "            r = j\n",
    "            j+=1\n",
    "            break;\n",
    "    if r == y:\n",
    "        i=1\n",
    "        return i, int(r)\n",
    "    else:\n",
    "        i=2\n",
    "        return i, int(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Model(t0, k, m, q, N):\n",
    "    N1 = population(t0, q, N)\n",
    "    l = k*m + math.factorial(k)/N1*math.factorial(k-2)*2\n",
    "    t1 = t0 + np.random.exponential(1/l)\n",
    "    var= change_pop(t0, t1, q, N)[0]\n",
    "    if var == 2:\n",
    "        t0 = q[change_pop(t0, t1, q, N)[1] + 1]\n",
    "        N1 = population(t0, q, N)\n",
    "        l = k*m + k*(k-1)/(2*N1)\n",
    "        t1 = t0 + np.random.exponential(1/l)\n",
    "    s = np.random.binomial(1, k*m/l)\n",
    "    return(s,t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.19128033 0.11744088]\n",
      " [0.31388457 0.76350736]\n",
      " [0.24866864 0.19784732]\n",
      " [0.16786555 0.30319405]\n",
      " [0.15691459 0.61868279]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.15064603 0.80209461]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]\n",
      " [0.         0.        ]]\n",
      "-------\n",
      "[(0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.0, 0, 0), (0.15182798512257387, 10, 11), (0.15140013069653407, 2, 12), (0.15549573442985234, 1, 5), (0.15083576681077956, 2, 14), (0.16478244296823846, 5, 6), (0.15450986512319365, 0, 10), (0.1598507550906068, 7, 12), (0.1650387617161682, 0, 4), (0.1522511693381738, 0, 11), (0.2076082622721958, 3, 8), (0.1581920534097787, 0, 6), (0.1709817894367677, 4, 4), (0.15311901087214883, 5, 6), (0.17121145577879915, 0, 3), (0.23147862890086296, 3, 3), (0.23665475238585243, 4, 4), (0.2834496542279735, 2, 2), (0.19540325039380269, 0, 0), (0.1649753407854804, 0, 1)]\n"
     ]
    }
   ],
   "source": [
    "t0=0\n",
    "i=1\n",
    "cnt=0\n",
    "raz=0\n",
    "k=20\n",
    "x=[]\n",
    "w=np.zeros((k,2))\n",
    "T = [((0.0, 0, 0)) for i in range(k)]\n",
    "while k!=1:\n",
    "    z=Model(t0,k,m,q,N)\n",
    "    if z[0]==1:\n",
    "        l = random.randint(0, k - 1)\n",
    "        p = random.random()\n",
    "        t=z[1]\n",
    "        w[l][1]=p\n",
    "        w[l][0]=t#Когда произошла мутация\n",
    "        cnt += 1\n",
    "    else:\n",
    "        l1 = random.randint(0, k - 1)\n",
    "        l2 = random.randint(0, k - 1)\n",
    "        t=z[1]#когда произошла коалесценция\n",
    "        T.append(((t, min(l1, l2), max(l1, l2))))\n",
    "        raz += 1\n",
    "        k -= 1\n",
    "        x.append(t)\n",
    "        if (k==1):\n",
    "            break;\n",
    "print(w) #Выводим данные для мутации\n",
    "print(\"-------\")\n",
    "print(T)# Выводим данные для коалесценции"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
